import os
import sys
import asyncio 
import datetime
import psutil
from pyrogram.types import Message
from database import db, mongodb_version
from config import Config, temp
from platform import python_version
from translation import Translation
from pyrogram import Client, filters, enums, __version__ as pyrogram_version
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputMediaDocument
import pytz
from datetime import datetime

TIMEZONE = "Asia/Kolkata"

main_buttons = [[
        InlineKeyboardButton('‚ùóÔ∏è ú·¥á ü·¥ò', callback_data='help')
        ],[
        InlineKeyboardButton('üìú s·¥ú·¥ò·¥ò·¥è Ä·¥õ …¢ Ä·¥è·¥ú·¥ò', url='https://t.me/CloneV2Support'),
        InlineKeyboardButton('üì¢ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü', url='https://t.me/Crazybotz')
        ],[
        InlineKeyboardButton('üí≥ ·¥Ö·¥è…¥·¥Ä·¥õ·¥á', callback_data='donate')
        ]]
#===================Start Function===================#

@Client.on_message(filters.private & filters.command(['start']))
async def start(client, message):
    user = message.from_user

    if Config.FORCE_SUB_ON:
        try:
            member = await client.get_chat_member(Config.FORCE_SUB_CHANNEL, user.id)
            if member.status == "kicked":
                await client.send_message(
                    chat_id=message.chat.id,
                    text="You are banned from using this bot.",
                )
                return
        except Exception:
            try:
                f_link = await client.export_chat_invite_link(Config.FORCE_SUB_CHANNEL)
                join_button = [
                    [InlineKeyboardButton("‚õî ·¥ä·¥è…™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü ‚õî", url=f"{f_link}")],
                    [InlineKeyboardButton("‚Üª ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥", url=f"https://t.me/{client.username}?start=start")]
                ]
                await client.send_photo(
                    chat_id=message.chat.id,
                    photo="https://telegra.ph/file/db2ea1a910dd7f83572f7.jpg",
                    caption="<b>‚ö†Ô∏è …™Íú∞  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥úÍú±·¥á ·¥ç·¥á,  è·¥è·¥ú  ú·¥Ä·¥†·¥á ·¥õ·¥è ·¥ä·¥è…™…¥ ·¥ç è ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü.</b>",
                    reply_markup=InlineKeyboardMarkup(join_button)
                )
                return
            except Exception:
                await client.send_message(
                    chat_id=message.chat.id,
                    text="‚ö†Ô∏è Unable to fetch the join link. Please contact the admin.",
                )
                return

    if not await db.is_user_exist(user.id):
        await db.add_user(user.id, message.from_user.mention)
        await client.send_message(
            chat_id=Config.LOG_CHANNEL,
            text=f"#Forwrad_NewUser\n\nI·¥Ö - {user.id}\nN·¥Ä·¥ç·¥á - {message.from_user.mention}"
        )
    
    reply_markup = InlineKeyboardMarkup(main_buttons)
    current_time = datetime.now(pytz.timezone(TIMEZONE))
    curr_time = current_time.hour        
    if curr_time < 12:
        gtxt = "…¢·¥è·¥è·¥Ö ·¥ç·¥è Ä…¥…™…¥…¢ üåû" 
    elif curr_time < 17:
        gtxt = "…¢·¥è·¥è·¥Ö ·¥Ä“ì·¥õ·¥á Ä…¥·¥è·¥è…¥ üåó" 
    elif curr_time < 21:
        gtxt = "…¢·¥è·¥è·¥Ö ·¥á·¥†·¥á…¥…™…¥…¢ üåò"
    else:
        gtxt = "…¢·¥è·¥è·¥Ö …¥…™…¢ ú·¥õ üåë"
    await client.send_message(
        chat_id=message.chat.id,
        text=Translation.START_TXT.format(message.from_user.mention, gtxt),
        reply_markup=reply_markup
    )

#==================Restart Function==================#

@Client.on_message(filters.private & filters.command(['restart']) & filters.user(Config.BOT_OWNER_ID))
async def restart(client, message):
    msg = await message.reply_text(
        text="<i>·¥õ Ä è…™…¥…¢ ·¥õ·¥è  Ä·¥ás·¥õ·¥Ä Ä·¥õ...</i>"
    )
    await asyncio.sleep(5)
    await msg.edit("<i>s·¥á Ä·¥†·¥á Ä  Ä·¥ás·¥õ·¥Ä Ä·¥õ·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ‚úÖ</i>")
    os.execl(sys.executable, sys.executable, *sys.argv)
    
#==================Callback Functions==================#

@Client.on_callback_query(filters.regex(r'^help'))
async def helpcb(bot, query):
    await query.message.edit_text(
        text=Translation.HELP_TXT,
        reply_markup=InlineKeyboardMarkup(
            [[
            InlineKeyboardButton('‚Ä¢  ú·¥è·¥° ·¥õ·¥è ·¥ús·¥á ·¥ç·¥á ‚ùì', callback_data='how_to_use')
            ],[
            InlineKeyboardButton('‚Ä¢ s·¥á·¥õ·¥õ…™…¥…¢s ', callback_data='settings#main'),
            InlineKeyboardButton('‚Ä¢ s·¥õ·¥Ä·¥õ·¥ús ', callback_data='status')
            ],[
            InlineKeyboardButton('‚Ä¢  ô·¥Ä·¥Ñ·¥ã', callback_data='back'),
            InlineKeyboardButton('‚Ä¢ ·¥Ä ô·¥è·¥ú·¥õ', callback_data='about')
            ]]
        ))

@Client.on_callback_query(filters.regex(r'^how_to_use'))
async def how_to_use(bot, query):
    await query.message.edit_text(
        text=Translation.HOW_USE_TXT,
             reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('‚Ä¢  ô·¥Ä·¥Ñ·¥ã', callback_data='help')]]),
        disable_web_page_preview=True
    )

@Client.on_callback_query(filters.regex(r'^back'))
async def back(bot, query):
    reply_markup = InlineKeyboardMarkup(main_buttons)
    current_time = datetime.now(pytz.timezone(TIMEZONE))
    curr_time = current_time.hour        
    if curr_time < 12:
        gtxt = "…¢·¥è·¥è·¥Ö ·¥ç·¥è Ä…¥…™…¥…¢ üåû" 
    elif curr_time < 17:
        gtxt = "…¢·¥è·¥è·¥Ö ·¥Ä“ì·¥õ·¥á Ä…¥·¥è·¥è…¥ üåó" 
    elif curr_time < 21:
        gtxt = "…¢·¥è·¥è·¥Ö ·¥á·¥†·¥á…¥…™…¥…¢ üåò"
    else:
        gtxt = "…¢·¥è·¥è·¥Ö …¥…™…¢ ú·¥õ üåë"
    await query.message.edit_text(
       reply_markup=reply_markup,
       text=Translation.START_TXT.format(
                query.from_user.first_name, gtxt))

@Client.on_callback_query(filters.regex(r'^about'))
async def about(bot, query):
    await query.message.edit_text(
        text=Translation.ABOUT_TXT,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('‚Ä¢  ô·¥Ä·¥Ñ·¥ã', callback_data='back')]]),
        disable_web_page_preview=True,
        parse_mode=enums.ParseMode.HTML,
    )

@Client.on_callback_query(filters.regex(r'^donate'))
async def donate(bot, query):
    await query.message.edit_text(
        text=Translation.DONATE_TXT,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('‚Ä¢  ô·¥Ä·¥Ñ·¥ã', callback_data='back')]]),
        disable_web_page_preview=True,
        parse_mode=enums.ParseMode.HTML,
    )

START_TIME = datetime.datetime.now()

def format_uptime():
    uptime = datetime.datetime.now() - START_TIME
    total_seconds = uptime.total_seconds()

    days, remainder = divmod(total_seconds, 86400)
    hours, remainder = divmod(remainder, 3600)
    minutes, seconds = divmod(remainder, 60)

    uptime_components = []
    if int(days) > 0:
        uptime_components.append(f"{int(days)} D" if int(days) == 1 else f"{int(days)} D")
    if int(hours) > 0:
        uptime_components.append(f"{int(hours)} H" if int(hours) == 1 else f"{int(hours)} H")
    if int(minutes) > 0:
        uptime_components.append(f"{int(minutes)} M" if int(minutes) == 1 else f"{int(minutes)} M")
    if int(seconds) > 0:
        uptime_components.append(f"{int(seconds)} Sec" if int(seconds) == 1 else f"{int(seconds)} Sec")

    uptime_str = ', '.join(uptime_components)
    return uptime_str

    uptime_str = f"{int(days)} days, {int(hours)} hours, {int(minutes)} minutes, {int(seconds)} seconds"
    return uptime_str

@Client.on_callback_query(filters.regex(r'^status'))
async def status(bot, query):
    users_count, bots_count = await db.total_users_bots_count()
    total_channels = await db.total_channels()

    # Calculate bot uptime
    uptime_str = format_uptime()

    await query.message.edit_text(
        text=Translation.STATUS_TXT.format(users_count, bots_count, temp.forwardings, total_channels),
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('‚Ä¢  ô·¥Ä·¥Ñ·¥ã', callback_data='help'),
             InlineKeyboardButton('‚Ä¢ s·¥á Ä·¥†·¥á Ä s·¥õ·¥Ä·¥õs', callback_data='server_status')
]]),
        parse_mode=enums.ParseMode.HTML,
        disable_web_page_preview=True,
    )

#Dont Remove My Credit @Silicon_Bot_Update 
#This Repo Is By @Silicon_Official 
# For Any Kind Of Error Ask Us In Support Group @Silicon_Botz 

@Client.on_callback_query(filters.regex(r'^server_status'))
async def server_status(bot, query):
    ram = psutil.virtual_memory().percent
    cpu = psutil.cpu_percent()

    await query.message.edit_text(
        text=Translation.SERVER_TXT.format(cpu, ram),
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('‚Ä¢  ô·¥Ä·¥Ñ·¥ã', callback_data='status')]]),
        parse_mode=enums.ParseMode.HTML,
        disable_web_page_preview=True,
    )

#===================Donate Function===================#

@Client.on_message(filters.private & filters.command(['donate']))
async def restart(client, message):
    await message.reply_text(
        text="<b><u>üíñ ·¥õ ú·¥Ä…¥·¥ã  è·¥è·¥ú ·¥õ ú·¥Ä·¥õ  è·¥è·¥ú ·¥Ä Ä·¥á ·¥Ñ·¥è…¥Íú±…™·¥Ö·¥á Ä…™…¥…¢ Íú±·¥ú·¥ò·¥ò·¥è Ä·¥õ…™…¥…¢ ·¥è·¥ú Ä  ô·¥è·¥õ.</u>\n\n"
             "<code>¬ª ·¥Ö·¥è…¥·¥Ä·¥õ·¥á ·¥úÍú± ·¥õ·¥è ·¥ã·¥á·¥á·¥ò ·¥è·¥ú Ä Íú±·¥á Ä·¥†…™·¥Ñ·¥áÍú± ·¥Ñ·¥è…¥·¥õ…™…¥·¥è·¥úÍú± ü è ·¥Ä ü…™·¥†·¥á "
             " è·¥è·¥ú ·¥Ñ·¥Ä…¥ Íú±·¥á…¥·¥Ö ·¥Ä…¥ è ·¥Ä·¥ç·¥è·¥ú…¥·¥õ ·¥Ö·¥è…¥·¥Ä·¥õ·¥á ·¥è…¥ ü è ·¥è…¥·¥á  Ä·¥ú·¥ò·¥á·¥á.</code>\n\n"
             "<u>·öú ·¥ò·¥Ä è·¥ç·¥á…¥·¥õ ·¥ç·¥á·¥õ ú·¥è·¥Ös ·öõ</u>\n\n"
             "üí≥ ·¥ú·¥ò…™ …™·¥Ö: <code>shivamnamdev01@axl</code>\n\n"
             "·¥è Ä ·¥Ö·¥è…¥·¥Ä·¥õ·¥á ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á ·¥ç·¥á <a href=https://t.me/heartlesssn>C Ä·¥Ä·¥¢ è</a></b>"
    )
